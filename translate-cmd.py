import sys
import os
import xml.etree.ElementTree as ET
from zipfile import ZipFile
import shutil

durationValues = {'whole': 4, 'half': 2, 'quarter': 1, 'eighth': 0.5, '16th': 0.25}
steps = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'A']

def translateXML(path):
    print('Translating XML file...')
    root = ET.parse(path).getroot()
        
    divisions = int(root.find('part/measure/attributes/divisions').text)
    sound = root.find('part/measure/direction/sound')
    staves = root.find('part/measure/attributes/staves')
    staves = int(staves.text) if not staves is None else 1

    if staves > 1:
        notes = [[] for i in range(staves)]
        durations = [[] for i in range(staves)]
    else:
        notes = []
        durations = []

    if not sound is None:
        tempo = int(sound.get('tempo'))
    else:
        tempo = 120
    
    quarterNote = 60.0 / tempo / divisions * 1000.0

    for measure in root.findall('part/measure'):
        for note in measure.findall('note'):
            if note.find('rest') is None:
                noteName = 'NOTE_'
                if not note.find('pitch/alter') is None:
                    if int(note.find('pitch/alter').text) == 1:
                        noteName += note.find('pitch/step').text + 'S'
                    elif int(note.find('pitch/alter').text) == -1:
                        index = steps[1:].index(note.find('pitch/step').text.upper())
                        noteName += steps[index-1] + 'S'
                else:
                    noteName += note.find('pitch/step').text
                noteName += note.find('pitch/octave').text
            else:
                noteName = '0'

            if not note.find('duration') is None:
                duration = quarterNote * int(note.find('duration').text)
            else:
                noteType = note.find('type')
                if not noteType is None and noteType.text in durationValues:
                    duration = quarterNote * durationValues[noteType.text]
                else:
                    duration = quarterNote * 4

            if staves > 1:
                index = int(note.find('staff').text)-1
                notes[index].append(noteName)
                durations[index].append(round(duration))
            else:
                notes.append(noteName)
                durations.append(round(duration))

    content = '#include "melody.h"\n\n/* '
    if not root.find('work/work-title') is None:
        title = root.find('work/work-title').text
        content += title + ' \n'

    content += 'Generated by MusicXML to Arduino \nhttps://github.com/Programista3/MusicXML-to-Arduino */\n\n'
    headerContent = '#ifndef melody_h\n#define melody_h\n#include "pitches.h"\n\n'
    if staves > 1:
        for i in range(len(notes)):
            content += 'int notes' + (str(i+1) if i != 0 else '') + '[' + str(len(notes[i])) + '] = {' + ', '.join(notes[i]) + '};\n'
            content += 'int durations' + (str(i+1) if i != 0 else '') + '[' + str(len(durations[i])) + '] = {' + ', '.join(list(map(str, durations[i]))) + '};\n\n'
            
            headerContent += 'extern int notes' + (str(i+1) if i != 0 else '') + '[' + str(len(notes[i])) + '];\n'
            headerContent += 'extern int durations' + (str(i+1) if i != 0 else '') + '[' + str(len(durations[i])) + '];\n\n'
    else:
        content += 'int notes[' + str(len(notes)) + '] = {' + (', '.join(notes)) + '};\n\n'
        content += 'int durations[' + str(len(durations)) + '] = {' + (', '.join(list(map(str, durations)))) + '};'

        headerContent += 'extern int notes[' + str(len(notes)) + '];\nextern int durations[' + str(len(durations)) + '];\n\n'

    headerContent += '#endif'

    print('Creating main file...')
    with open('melody.cpp', 'w', encoding='utf8') as file:
        file.write(content)
        file.close()

    print('Creating header file...')
    with open('melody.h', 'w', encoding='utf8') as header:
        header.write(headerContent)
        header.close()

if __name__ == '__main__':
    if len(sys.argv) > 1 and os.path.exists(sys.argv[1]):
        if sys.argv[1].endswith('.xml'):
            translateXML(sys.argv[1])

        elif sys.argv[1].endswith('.mxl'):
            with ZipFile(sys.argv[1], 'r') as mxl:
                print('Decompressing .mxl file...')
                mxl.extractall('tmp')

            print('Searching for .xml file...')
            for file in os.listdir('tmp'):
                if file.endswith('.xml'):
                    translateXML(os.path.join('tmp', file))
                    break
            
            print('Removing temporary files...')
            shutil.rmtree('tmp')
        else:
            sys.exit('Invalid file type! Expected .xml or .mxl')
    else:
        sys.exit('Invalid or missing file path!')